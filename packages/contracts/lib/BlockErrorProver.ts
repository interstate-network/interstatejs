import BN from "bn.js";
import { Address } from "web3x/address";
import { EventLog, TransactionReceipt } from "web3x/formatters";
import { Contract, ContractOptions, TxCall, TxSend, EventSubscriptionFactory } from "web3x/contract";
import { Eth } from "web3x/eth";
import abi from "./BlockErrorProverAbi";
interface BlockErrorProverEvents {
}
interface BlockErrorProverEventLogs {
}
interface BlockErrorProverTxEventLogs {
}
export interface BlockErrorProverTransactionReceipt extends TransactionReceipt<BlockErrorProverTxEventLogs> {
}
interface BlockErrorProverMethods {
    proveExitsRootError(commitmentQuery: {
        parentHash: string;
        childIndex: number | string | BN;
        blockNumber: number | string | BN;
        commitment: {
            submittedAt: number | string | BN;
            exitsRoot: string;
            coinbase: Address;
            blockHash: string;
        };
    }, header: {
        parentHash: string;
        number: number | string | BN;
        incomingTransactionsIndex: number | string | BN;
        incomingTransactionsCount: number | string | BN;
        transactionsCount: number | string | BN;
        transactionsRoot: string;
        stateRoot: string;
        exitsRoot: string;
        coinbase: Address;
        timestamp: number | string | BN;
    }, stateProofBytes: string, storageProofBytes: string): TxSend<BlockErrorProverTransactionReceipt>;
    proveIncomingTransactionIndexError(parent: {
        parentHash: string;
        number: number | string | BN;
        incomingTransactionsIndex: number | string | BN;
        incomingTransactionsCount: number | string | BN;
        transactionsCount: number | string | BN;
        transactionsRoot: string;
        stateRoot: string;
        exitsRoot: string;
        coinbase: Address;
        timestamp: number | string | BN;
    }, commitmentQuery: {
        parentHash: string;
        childIndex: number | string | BN;
        blockNumber: number | string | BN;
        commitment: {
            submittedAt: number | string | BN;
            exitsRoot: string;
            coinbase: Address;
            blockHash: string;
        };
    }, header: {
        parentHash: string;
        number: number | string | BN;
        incomingTransactionsIndex: number | string | BN;
        incomingTransactionsCount: number | string | BN;
        transactionsCount: number | string | BN;
        transactionsRoot: string;
        stateRoot: string;
        exitsRoot: string;
        coinbase: Address;
        timestamp: number | string | BN;
    }): TxSend<BlockErrorProverTransactionReceipt>;
    proveIncomingTransactionsOutOfRangeError(commitmentQuery: {
        parentHash: string;
        childIndex: number | string | BN;
        blockNumber: number | string | BN;
        commitment: {
            submittedAt: number | string | BN;
            exitsRoot: string;
            coinbase: Address;
            blockHash: string;
        };
    }, header: {
        parentHash: string;
        number: number | string | BN;
        incomingTransactionsIndex: number | string | BN;
        incomingTransactionsCount: number | string | BN;
        transactionsCount: number | string | BN;
        transactionsRoot: string;
        stateRoot: string;
        exitsRoot: string;
        coinbase: Address;
        timestamp: number | string | BN;
    }): TxSend<BlockErrorProverTransactionReceipt>;
    proveTimestampError(parent: {
        parentHash: string;
        number: number | string | BN;
        incomingTransactionsIndex: number | string | BN;
        incomingTransactionsCount: number | string | BN;
        transactionsCount: number | string | BN;
        transactionsRoot: string;
        stateRoot: string;
        exitsRoot: string;
        coinbase: Address;
        timestamp: number | string | BN;
    }, commitmentQuery: {
        parentHash: string;
        childIndex: number | string | BN;
        blockNumber: number | string | BN;
        commitment: {
            submittedAt: number | string | BN;
            exitsRoot: string;
            coinbase: Address;
            blockHash: string;
        };
    }, header: {
        parentHash: string;
        number: number | string | BN;
        incomingTransactionsIndex: number | string | BN;
        incomingTransactionsCount: number | string | BN;
        transactionsCount: number | string | BN;
        transactionsRoot: string;
        stateRoot: string;
        exitsRoot: string;
        coinbase: Address;
        timestamp: number | string | BN;
    }): TxSend<BlockErrorProverTransactionReceipt>;
    proveBlockNumberError(parent: {
        parentHash: string;
        number: number | string | BN;
        incomingTransactionsIndex: number | string | BN;
        incomingTransactionsCount: number | string | BN;
        transactionsCount: number | string | BN;
        transactionsRoot: string;
        stateRoot: string;
        exitsRoot: string;
        coinbase: Address;
        timestamp: number | string | BN;
    }, commitmentQuery: {
        parentHash: string;
        childIndex: number | string | BN;
        blockNumber: number | string | BN;
        commitment: {
            submittedAt: number | string | BN;
            exitsRoot: string;
            coinbase: Address;
            blockHash: string;
        };
    }, header: {
        parentHash: string;
        number: number | string | BN;
        incomingTransactionsIndex: number | string | BN;
        incomingTransactionsCount: number | string | BN;
        transactionsCount: number | string | BN;
        transactionsRoot: string;
        stateRoot: string;
        exitsRoot: string;
        coinbase: Address;
        timestamp: number | string | BN;
    }): TxSend<BlockErrorProverTransactionReceipt>;
    proveStateRootError(commitmentQuery: {
        parentHash: string;
        childIndex: number | string | BN;
        blockNumber: number | string | BN;
        commitment: {
            submittedAt: number | string | BN;
            exitsRoot: string;
            coinbase: Address;
            blockHash: string;
        };
    }, header: {
        parentHash: string;
        number: number | string | BN;
        incomingTransactionsIndex: number | string | BN;
        incomingTransactionsCount: number | string | BN;
        transactionsCount: number | string | BN;
        transactionsRoot: string;
        stateRoot: string;
        exitsRoot: string;
        coinbase: Address;
        timestamp: number | string | BN;
    }, transaction: string, transactionIndex: number | string | BN, siblings: string[]): TxSend<BlockErrorProverTransactionReceipt>;
}
export interface BlockErrorProverDefinition {
    methods: BlockErrorProverMethods;
    events: BlockErrorProverEvents;
    eventLogs: BlockErrorProverEventLogs;
}
export class BlockErrorProver extends Contract<BlockErrorProverDefinition> {
    constructor(eth: Eth, address?: Address, options?: ContractOptions) {
        super(eth, abi, address, options);
    }
    deploy(): TxSend<BlockErrorProverTransactionReceipt> {
        return super.deployBytecode("0x608060405234801561001057600080fd5b50611638806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631a88cf53146100675780632e4375391461007c57806359e44f8f1461008f578063c6ba8a09146100a2578063f3a30c63146100b5578063f9f7a40d146100c8575b600080fd5b61007a610075366004610f48565b6100db565b005b61007a61008a366004610d9d565b61015f565b61007a61009d366004610e59565b610243565b61007a6100b0366004610f48565b6102ec565b61007a6100c3366004610dd2565b610351565b61007a6100d6366004610f48565b6103c9565b6100e483610447565b82511461010c5760405162461bcd60e51b8152600401610103906112ec565b60405180910390fd5b61011e6000838363ffffffff61047716565b82610120015181610120015111156101485760405162461bcd60e51b8152600401610103906111dd565b61015960008363ffffffff6104d116565b50505050565b6101716000838363ffffffff61047716565b60008160600151826040015101905060008060030160009054906101000a90046001600160a01b03166001600160a01b031663578cb8f96040518163ffffffff1660e01b815260040160206040518083038186803b1580156101d257600080fd5b505afa1580156101e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020a9190611098565b905080821161022b5760405162461bcd60e51b8152600401610103906112a7565b61023c60008563ffffffff6104d116565b5050505050565b6102556000868663ffffffff61047716565b8160010184608001511461027b5760405162461bcd60e51b815260040161010390611471565b61028d8484848463ffffffff61056a16565b6102a95760405162461bcd60e51b81526004016101039061143a565b825183015160c08501518114156102d25760405162461bcd60e51b81526004016101039061135b565b6102e360008763ffffffff6104d116565b50505050505050565b6102f583610447565b8251146103145760405162461bcd60e51b8152600401610103906112ec565b6103266000838363ffffffff61047716565b8260200151600101816020015114156101485760405162461bcd60e51b815260040161010390611392565b6103636000858563ffffffff61047716565b60025460c0840151602085015160009261038a926001600160a01b03909116918686610585565b9050808460e0015114156103b05760405162461bcd60e51b815260040161010390611403565b6103c160008663ffffffff6104d116565b505050505050565b6103d283610447565b8251146103f15760405162461bcd60e51b8152600401610103906112ec565b6104036000838363ffffffff61047716565b60008360600151846040015101905080826040015114156104365760405162461bcd60e51b815260040161010390611198565b61023c60008463ffffffff6104d116565b60008160405160200161045a91906114dc565b604051602081830303815290604052805190602001209050919050565b61048183836106ac565b61049d5760405162461bcd60e51b81526004016101039061132e565b6104a681610447565b826060015160600151146104cc5760405162461bcd60e51b8152600401610103906113c2565b505050565b80516000908152600d830160209081526040822090830151815481106104f357fe5b6000918252602080832091909101829055606084810180518201518452600f8701909252604092839020805460ff191660029081179091559151015191517f99c9efff0684b78043f08af38ed552c7eb27175341050520cf3d3a60f83b26e59161055c91611184565b60405180910390a292915050565b600061057c8560a001518585856106f2565b95945050505050565b600061058f610b25565b6105a2878761059c61078b565b876107c7565b90506105ac610b4c565b6105b5846108a9565b9050876001600160a01b031663b09626738360400151610100846000015185602001518b6040516020016105e99190611131565b60408051601f198184030181528282528051602090910120908901516001600160e01b031960e089901b168352610626969594939260040161113a565b60206040518083038186803b15801561063e57600080fd5b505afa158015610652573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106769190610d76565b6106925760405162461bcd60e51b815260040161010390611241565b61069f81602001516108cd565b5198975050505050505050565b60006106bb8260600151610931565b82516000908152600d85016020908152604090912090840151815481106106de57fe5b906000526020600020015414905092915050565b600083516000141561071457602084015180610712576000915050610783565b505b8351602085012060005b835181101561077d57600084828151811061073557fe5b60200260200101519050600061074b8784610944565b905060ff81166107665761075f8483610951565b9350610773565b6107708285610951565b93505b505060010161071e565b50851490505b949350505050565b600080610796610984565b6040516020016107a69190611131565b60408051601f19818403018152919052805160209091012060601c92915050565b6107cf610b25565b6107d7610b4c565b6107e0836108a9565b80516020820151604080840151905163b096267360e01b81529394506001600160a01b03808b169463b096267394610826948c9460a094929391928d169160040161113a565b60206040518083038186803b15801561083e57600080fd5b505afa158015610852573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108769190610d76565b6108925760405162461bcd60e51b815260040161010390611214565b61089f816020015161098a565b9695505050505050565b6108b1610b4c565b818060200190518101906108c59190610fc3565b90505b919050565b6108d5610b6d565b6108de82610a85565b1561091d5750604080518082019091527f2def10d13dd169f550f578bda343d9717a138562e0093b380a1120789d53cf108152600060208201526108c8565b818060200190518101906108c59190610f90565b60008160405160200161045a91906114a8565b600182821c165b92915050565b60008282604051602001610966929190611123565b60405160208183030381529060405280519060200120905092915050565b61c35590565b610992610b25565b81516109a7576109a0610ab7565b90506108c8565b8151602014156109e457602082015180156109d45760405162461bcd60e51b815260040161010390611270565b6109dc610ab7565b9150506108c8565b600080600080610a2d565b8051600090600183019060f81c608081108015610a0e57819350610a26565b60808203835160088202610100031c94508084019350505b5050915091565b602086015160f81c860160d51901610a44816109ef565b91509450610a51816109ef565b6001810151602290910151604080516080810182529889526020890193909352918701526060860152509295945050505050565b6000815160001415610a99575060016108c8565b815160201415610aaf57506020810151156108c8565b506000919050565b610abf610b25565b5060408051608081018252600080825260208201527fa9a4da177ac3f81cfe85a6767678aabb095aa306e72ab73f5cf0559c56d0a530918101919091527fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470606082015290565b60408051608081018252600080825260208201819052918101829052606081019190915290565b60405180606001604052806000815260200160608152602001606081525090565b604080518082019091526000808252602082015290565b80356001600160a01b038116811461094b57600080fd5b600082601f830112610bab578081fd5b8151610bbe610bb98261157a565b611553565b818152915060208083019084810181840286018201871015610bdf57600080fd5b60005b84811015610bfe57815184529282019290820190600101610be2565b505050505092915050565b600082601f830112610c19578081fd5b8135610c27610bb98261159a565b9150808252836020828501011115610c3e57600080fd5b8060208401602084013760009082016020015292915050565b600081830360e0811215610c69578182fd5b610c736080611553565b91508235825260208301356020830152604083013560408301526080605f1982011215610c9f57600080fd5b50610caa6080611553565b606083013581526080830135602082015260a0830135610cc9816115ea565b8060408301525060c083013560608201528060608301525092915050565b6000610140808385031215610cfa578182fd5b610d0381611553565b915050813581526020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e0820152610100610d5f84828501610b84565b818301525061012080830135818301525092915050565b600060208284031215610d87578081fd5b81518015158114610d96578182fd5b9392505050565b6000806102208385031215610db0578081fd5b610dba8484610c57565b9150610dc98460e08501610ce7565b90509250929050565b6000806000806102608587031215610de8578182fd5b610df28686610c57565b9350610e018660e08701610ce7565b925061022085013567ffffffffffffffff80821115610e1e578384fd5b610e2a88838901610c09565b9350610240870135915080821115610e40578283fd5b50610e4d87828801610c09565b91505092959194509250565b60008060008060006102808688031215610e71578081fd5b610e7b8787610c57565b9450610e8a8760e08801610ce7565b935061022086013567ffffffffffffffff80821115610ea7578283fd5b610eb389838a01610c09565b94506102408801359350610260880135915080821115610ed1578283fd5b5080870188601f820112610ee3578283fd5b80359150610ef3610bb98361157a565b80838252602080830192508084018c828388028701011115610f13578687fd5b8694505b85851015610f35578035845260019490940193928101928101610f17565b5050809450505050509295509295909350565b60008060006103608486031215610f5d578081fd5b610f678585610ce7565b9250610f77856101408601610c57565b9150610f87856102208601610ce7565b90509250925092565b600060408284031215610fa1578081fd5b610fab6040611553565b82518152602083015160208201528091505092915050565b60006020808385031215610fd5578182fd5b825167ffffffffffffffff80821115610fec578384fd5b81850160608188031215610ffe578485fd5b6110086060611553565b925080518352838101518281111561101e578586fd5b80820188601f82011261102f578687fd5b8051915061103f610bb98361159a565b8281528987848401011115611052578788fd5b611061838883018985016115be565b8087870152505050604081015193508184111561107c578485fd5b61108887858301610b9b565b6040840152509095945050505050565b6000602082840312156110a9578081fd5b5051919050565b6001600160a01b03169052565b6000815180845260208085019450808401835b838110156110ec578151875295820195908201906001016110d0565b509495945050505050565b6000815180845261110f8160208601602086016115be565b601f01601f19169290920160200192915050565b918252602082015260400190565b90815260200190565b600087825286602083015285604083015260c0606083015261115f60c08301866110f7565b84608084015282810360a084015261117781856110bd565b9998505050505050505050565b602081016003831061119257fe5b91905290565b60208082526025908201527f496e636f6d696e67207472616e73616374696f6e7320696e646578206973207660408201526430b634b21760d91b606082015260800190565b6020808252601a908201527f4865616465722074696d657374616d702069732076616c69642e000000000000604082015260600190565b60208082526013908201527224b73b30b634b21039ba30ba3290383937b7b360691b604082015260600190565b60208082526015908201527424b73b30b634b21039ba37b930b3b290383937b7b360591b604082015260600190565b60208082526019908201527f496e76616c6964206163636f756e7420656e636f64696e672e00000000000000604082015260600190565b60208082526025908201527f496e636f6d696e67207472616e73616374696f6e7320696e64657820696e207260408201526430b733b29760d91b606082015260800190565b60208082526022908201527f506172656e7420626c6f636b20646f6573206e6f74206d61746368206368696c604082015261321760f11b606082015260800190565b60208082526013908201527224b73b30b634b21031b7b6b6b4ba36b2b73a1760691b604082015260600190565b6020808252601c908201527f486561646572206861642076616c696420737461746520726f6f742e00000000604082015260600190565b602080825260169082015275213637b1b590373ab6b132b91034b9903b30b634b21760511b604082015260600190565b60208082526021908201527f48656164657220646f6573206e6f74206d6174636820636f6d6d69746d656e746040820152601760f91b606082015260800190565b6020808252601e908201527f4865616465722068616420636f727265637420657869747320726f6f742e0000604082015260600190565b6020808252601a908201527f496e76616c6964207472616e73616374696f6e2070726f6f662e000000000000604082015260600190565b6020808252601e908201527f5472616e73616374696f6e206e6f74206c61737420696e20626c6f636b2e0000604082015260600190565b81518152602080830151908201526040808301516001600160a01b0316908201526060918201519181019190915260800190565b600061014082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151611542828501826110b0565b505061012092830151919092015290565b60405181810167ffffffffffffffff8111828210171561157257600080fd5b604052919050565b600067ffffffffffffffff821115611590578081fd5b5060209081020190565b600067ffffffffffffffff8211156115b0578081fd5b50601f01601f191660200190565b60005b838110156115d95781810151838201526020016115c1565b838111156101595750506000910152565b6001600160a01b03811681146115ff57600080fd5b5056fea26469706673582212209d20ba604e671c95afc4d5b850097d72abe321d2fb1298d8c9b2f7958d96316b64736f6c634300060b0033") as any;
    }
}
export var BlockErrorProverAbi = abi;
