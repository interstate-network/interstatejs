

/*
SIO is an array, so
sio offset = ptr to length of sio array
sio[i] offset = sio offset + i*32

each SIO will start with the following:
0-32 | opcode
32-64 | meta offset
64-96 | meta bytes length

*/

#define macro SIO_NEXT_OFFSET = takes(0) returns(1) {
  GET_CURRENT_SIO_CDPTR()   // [ sio_offset ]
  dup1                      // [ sio_offset, sio_offset ]
  0x20                      // [ 32, sio_offset, sio_offset ]
  add                       // [ 32 + sio_offset, sio_offset ]
  SET_CURRENT_SIO_CDPTR()   // [ sio_offset ]
  calldataload              // [ rel_offset ]
  GET_TX_SIO_CDPTR()
  add                       // [ begin_sio_ptr ]
}

/*
takes the cdptr for the start of the current SIO
checks the opcode, throws if invalid
returns cdptr to start of metadata
currently ignoring length and not performing bounds checks because we will probably change the encoding
*/
template <sio_revert_label, opcode>
#define macro SIO_CHECK_OPCODE = takes(0) returns(0) {
  // [ record_opcode_ptr ]
  /** skip length -- @dev TODO: verify length */
  0x20 add                                    // [ record_body_ptr ]
  dup1                                        // [ record_body_ptr, record_body_ptr ]
  calldataload                                // [ opcode, record_body_ptr ]
  <opcode> eq iszero <sio_revert_label> jumpi // [ record_body_ptr ]
  /* skip opcode */
  0x20 add                                    // [ record_body_meta_ptr ]
}

/* get offset of next sio struct, check opcode is valid (or throw), return offset to beginning of meta */
template <sio_revert_label, opcode>
#define macro SIO_START = takes(0) returns(0) {
  SIO_NEXT_OFFSET() // [ record_opcode_ptr ]
  SIO_CHECK_OPCODE<sio_revert_label, opcode>() // [ record_body_meta_ptr ]
}

/**
 * @title SIO_RETURN_ONE
 * @dev Verifies:
 *  - the first byte in the current SIO block is the one being executed
 * if check fails, jumps to sio revert label
 * if check passes, pushes the first value from the SIO block(1-33) to the stack
 * and adds 33 to the current SIO block
*/
template <sio_revert_label, opcode>
#define macro SIO_RETURN_ONE = takes(1) returns(1) {
                            // [ ]
  SIO_START<sio_revert_label, opcode>() // [ sio_offset ]
  calldataload
  /* GET_CURRENT_SIO_CDPTR()   // [ sio_offset ]
  dup1                      // [ sio_offset, sio_offset ]
  calldataload              // [ calldata[sio_offset:sio_offset+32], sio_offset ]
  0xf8                      // [ 0xf8, calldata[sio_offset:sio_offset+32], sio_offset ]
  shr                       // [ sio_opcode, sio_offset ]
  <opcode>                  // [ expected_opcode, sio_opcode, sio_offset ]
  eq                        // [ op_valid, sio_offset ]
  iszero                    // [ !op_valid, sio_offset ]
  <sio_revert_label>        // [ sio_revert_label, !op_valid, sio_offset ]
  jumpi                     // [ sio_offset ]
  dup1                      // [ sio_offset, sio_offset ]
  0x21                      // [ 0x21, sio_offset, sio_offset ]
  add                       // [ 0x21 + sio_offset, sio_offset ]
  SET_CURRENT_SIO_CDPTR()   // [ sio_offset ]
  0x01                      // [ 1, sio_offset ]
  add                       // [ 1 + sio_offset ]
  calldataload              // [ returned_value (calldata[sio_offset:sio_offset+32]) ] */
}

/**
 * @title VERIFY_ACCESS_ONE_RETURN_ONE
 * @dev Verifies:
 *  - the first byte in the current SIO block is the one being executed
 *  - the first value in the SIO block (bytes 1-33) match the top of the stack
 * if either check fails, jumps to sio revert label
 * if both checks pass, pushes the second value from the SIO block(33-65) to the stack
 * and adds 65 to the current SIO block
*/
template <sio_revert_label, opcode>
#define macro VERIFY_ACCESS_ONE_RETURN_ONE = takes(1) returns(1) {
                                        // [ expected_value ]
  SIO_START<sio_revert_label, opcode>() // [ begin_meta_ptr, expected_value ]
  swap1 dup2 // [ begin_meta_ptr, expected_value, begin_meta_ptr ]
  calldataload eq iszero <sio_revert_label> jumpi
  0x20 add calldataload
}

template <sio_revert_label>
#define macro VERIFY_ACCESS_TWO_INTERNAL = takes(3) returns(0) {
                                              // [ begin_meta_ptr, expected_value1, expected_value2 ]
  swap1 dup2                                  // [ begin_meta_ptr, expected_value1, begin_meta_ptr, expected_value2 ]
  calldataload eq                             // [ good_value1, begin_meta_ptr, expected_value2 ]
  swap2                                       // [ expected_value2, begin_meta_ptr, good_value1 ]
  swap1 0x20 add calldataload eq              // [ good_value2, good_value1 ]
  and iszero <sio_revert_label> jumpi         // [ ]
}

/*
  read first word from sio, compare to value on the stack, throw if not eq
  read second word from sio, compare to value on the stack, throw if not eq
*/
template <sio_revert_label, opcode>
#define macro VERIFY_ACCESS_TWO = takes(2) returns(0) {
                                        // [ expected_value1, expected_value2 ]
  SIO_START<sio_revert_label, opcode>() // [ begin_meta_ptr, expected_value1, expected_value2 ]
  VERIFY_ACCESS_TWO_INTERNAL<sio_revert_label>()
}