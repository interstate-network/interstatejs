template <safemath_revert_label>
#define macro SM_ADD = takes(2) returns(1) {
  // [ a, b ]
  dup2                    // [ b, a, b ]
  add                     // [ b+a, b ]
  dup1                    // [ b+a, b+a, b ]
  swap2                   // [ b, b+a, b+a ]
  gt                      // [ b>(b+a), (b+a) ]
  <safemath_revert_label> // [ revert_label, b>(b+a), (b+a) ]
  jumpi                   // [ b>(b+a), (b+a) ]
}

template <safemath_revert_label>
#define macro SM_SUB = takes(2) returns(1) {
    // stack state: a b
    // calling sub will create (a-b)
    // if (b>a) we have integer underflow - throw an error
    dup1 dup3 gt // stack state: (b>a) a b
    <safemath_revert_label> jumpi // stack state: a b
    sub // stack state: (a-b)
}